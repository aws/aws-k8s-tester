---
AWSTemplateFormatVersion: "2010-09-09"
Description: "kubetest2-eksapi infrastructure"

Parameters:
  AdditionalClusterRoleServicePrincipal:
    Type: String
    Default: ""
    Description: Additional service principal with sts:AssumeRole permissions on the ClusterRole

  ResourceId:
    Type: String

  AutoMode:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

Conditions:
  HasAdditionalClusterRoleServicePrincipal:
    Fn::Not:
      - Fn::Equals:
        - ""
        - !Ref AdditionalClusterRoleServicePrincipal

  IsAutoMode: !Equals [!Ref AutoMode, "true"]

Resources:
  #
  # Public VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: {{ .VPCCIDRBlock }}
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/VPC"
  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId:
        Ref: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/InternetGateway"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId:
        Ref: VPC

{{ range $index, $cidr := .PublicCIDRs }}
  SubnetPublic{{ $index }}:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet {{ $index }}
    DependsOn: IPv6CidrBlock
    Properties:
      AvailabilityZone: "{{index $.AvailabilityZones $index}}"
      CidrBlock: {{ $cidr }}
      Ipv6CidrBlock:
        !Select [{{ $index }}, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], {{ $.NumSubnets }}, {{ $.Ipv6CidrBits }}]]
      AssignIpv6AddressOnCreation: true
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/SubnetPublic{{ $index }}"
      VpcId:
        Ref: VPC

  NatGatewayEIP{{ $index }}:
    Type: AWS::EC2::EIP
    DependsOn:
      - VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/NatGatewayEIP{{ $index }}"

  NATGateway{{ $index }}:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - NatGatewayEIP{{ $index }}
      - SubnetPublic{{ $index }}
      - VPCGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP{{ $index }}
          - AllocationId
      SubnetId:
        Ref: SubnetPublic{{ $index }}
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/NATGateway{{ $index }}"

  RouteTableAssociationPublic{{ $index }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: SubnetPublic{{ $index }}
{{ end }}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/PublicRouteTable"
  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetDefaultIpv6Route:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - VPCGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable

{{ range $index, $cidr := .PrivateCIDRs }}
  SubnetPrivate{{ $index }}:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      AvailabilityZone: "{{index $.AvailabilityZones $index}}"
      CidrBlock: "{{ $cidr }}"
      Ipv6CidrBlock:
        !Select [{{$indexPadding := len $.PublicCIDRs}}{{ add $indexPadding $index }}, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], {{ $.NumSubnets }}, {{ $.Ipv6CidrBits }}]]
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/SubnetPrivate{{ $index }}"
      VpcId:
        Ref: VPC
  PrivateRouteTable{{ $index }}:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}/PrivateRouteTable{{ $index }}"
  
  PrivateSubnetDefaultRoute{{ $index }}:
    Type: AWS::EC2::Route
    DependsOn:
      - VPCGatewayAttachment
      - NATGateway{{ $index }}
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway{{ $index }}
      RouteTableId:
        Ref: PrivateRouteTable{{ $index }}

  PrivateSubnetDefaultIpv6Route{{ $index }}:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId:
        Ref: EgressOnlyInternetGateway
      RouteTableId:
        Ref: PrivateRouteTable{{ $index }}

  RouteTableAssociationPrivate{{ $index }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable{{ $index }}
      SubnetId:
        Ref: SubnetPrivate{{ $index }}
{{ end }}

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - "sts:AssumeRole"
            - "sts:TagSession"
            Effect: Allow
            Principal:
              Service:
                Fn::If:
                  - HasAdditionalClusterRoleServicePrincipal
                  - - "eks.amazonaws.com"
                    - !Ref AdditionalClusterRoleServicePrincipal
                  - - "eks.amazonaws.com"
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonEKSClusterPolicy"
        - !If
          - IsAutoMode
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/AmazonEKSBlockStoragePolicy"
          - !Ref "AWS::NoValue"
        - !If
          - IsAutoMode
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/AmazonEKSComputePolicy"
          - !Ref "AWS::NoValue"
        - !If
          - IsAutoMode
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/AmazonEKSLoadBalancingPolicy"
          - !Ref "AWS::NoValue"
        - !If
          - IsAutoMode
          - !Join
            - ""
            - - "arn:"
              - !Ref "AWS::Partition"
              - ":iam::aws:policy/AmazonEKSNetworkingPolicy"
          - !Ref "AWS::NoValue"

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":iam::aws:policy/AmazonS3FullAccess"

  VPCCNIIPv6Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                      "ec2:AssignIpv6Addresses",
                      "ec2:DescribeInstances",
                      "ec2:DescribeTags",
                      "ec2:DescribeNetworkInterfaces",
                      "ec2:DescribeInstanceTypes"
                  ],
                  "Resource": "*"
              },
              {
                  "Effect": "Allow",
                  "Action": [
                      "ec2:CreateTags"
                  ],
                  "Resource": [
                      "arn:*:ec2:*:*:network-interface/*"
                  ]
              }
          ]
        }
      PolicyName: AmazonEKS_CNI_IPv6_Policy
      Roles:
        - !Ref NodeRole

Outputs:
  SubnetsPrivate:
    Value:
      Fn::Join:
        - ","
        - [{{ range $index, $cidr := .PrivateCIDRs -}}{{if $index}}, {{end}}Ref: SubnetPrivate{{ $index }}{{ end }}]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SubnetsPrivate"

  SubnetsPublic:
    Value:
      Fn::Join:
        - ","
        - [{{ range $index, $cidr := .PublicCIDRs -}}{{if $index}}, {{end}}Ref: SubnetPublic{{ $index }}{{ end }}]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SubnetsPublic"

  VPC:
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::VPC"

  ClusterRole:
    Value:
      Fn::Join:
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":iam::"
          - !Ref "AWS::AccountId"
          - ":role/"
          - !Ref ClusterRole
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ClusterRole"

  NodeRole:
    Value:
      Fn::Join:
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":iam::"
          - !Ref "AWS::AccountId"
          - ":role/"
          - !Ref NodeRole
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::NodeRole"