---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'kubetest2-eksapi unmanaged nodegroup with EFA support'

Parameters:
  ResourceId:
    Description: Unique identifier for this kubetest2-eksapi execution.
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  AMIId:
    Type: String
    Description: Specify AMI id for the node instances.

  NodeDiskSize:
    Type: Number
    Description: Node disk size in gigabytes.
    Default: 100

  NodeCount:
    Type: Number

  ClusterName:
    Type: String

  NodeRoleName:
    Description: The IAM role name  of worker nodes.
    Type: String

  SSHKeyPair:
    Type: String

  UserData:
    Type: String

  UserDataIsMIMEPart:
    Description: "User data should be embedded as a part of a multi-part MIME document"
    Default: true
    Type: String
    AllowedValues: [true, false]

  InstanceType:
    Type: String
    Description: Efa supports only one instance type in the cluster. eg. p3dn.24xlarge, p4d.24xlarge or p5.48xlarge
    Default: "p5.48xlarge"

Conditions:
  IsP4Node:
    !Equals [Ref: InstanceType, p4d.24xlarge]
  IsP5Node:
    !Equals [Ref: InstanceType, p5.48xlarge]
  IsUserDataMIMEPart:
    !Equals [true, !Ref UserDataIsMIMEPart]

Resources:
  EFASecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VpcId

  EFASecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref EFASecurityGroup

  EFASecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow the efa worker nodes outbound communication
      DestinationSecurityGroupId: !Ref EFASecurityGroup
      FromPort: 0
      ToPort: 65536
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "-1"
  
  EFASecurityGroupEgressAllIpv4:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow the efa worker nodes outbound communication
      FromPort: 0
      ToPort: 65536
      CidrIp: "0.0.0.0/0"
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "-1"

  EFASecurityGroupEgressAllIpv6:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow the efa worker nodes outbound communication
      FromPort: 0
      ToPort: 65536
      CidrIpv6: "::/0"
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "-1"
  
  EFASecurityGroupIngressSSHIpv4:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow SSH
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "tcp"
      
  EFASecurityGroupIngressSSHIpv6:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow SSH
      FromPort: 22
      ToPort: 22
      CidrIpv6: "::/0"
      GroupId: !Ref EFASecurityGroup
      IpProtocol: "tcp"

  EFASecurityGroupIngressControlPlane:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      ToPort: 443
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EFASecurityGroup

  EFASecurityGroupEgressControlPlane:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref EFASecurityGroup
      FromPort: 1025
      ToPort: 65535
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp

  ControlPlaneEgressToEFASecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref EFASecurityGroup
      FromPort: 443
      ToPort: 443
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp

  EFASecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      ToPort: 65535
      GroupId: !Ref EFASecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SecurityGroup

  EFASecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: EFASecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      ToPort: 443
      GroupId: !Ref EFASecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SecurityGroup

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeRoleName

  NodeLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Ref ResourceId
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref NodeDiskSize
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        KeyName: !Ref SSHKeyPair
        NetworkInterfaces: !If
          - IsP5Node
          -
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 0
              DeviceIndex: 0
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 4
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 8
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 12
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 16
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 20
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 24
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
            - Description: NetworkInterfaces Configuration For EFA and EKS
              NetworkCardIndex: 28
              DeviceIndex: 1
              InterfaceType: efa
              Groups:
                - !Ref EFASecurityGroup
          - !If
            - IsP4Node
            -
              - Description: NetworkInterfaces Configuration For EFA and EKS
                NetworkCardIndex: 0
                DeviceIndex: 0
                InterfaceType: efa
                Groups:
                  - !Ref EFASecurityGroup
              - Description: NetworkInterfaces Configuration For EFA and EKS
                NetworkCardIndex: 1
                DeviceIndex: 1
                InterfaceType: efa
                Groups:
                - !Ref EFASecurityGroup
              - Description: NetworkInterfaces Configuration For EFA and EKS
                NetworkCardIndex: 2
                DeviceIndex: 2
                InterfaceType: efa
                Groups:
                - !Ref EFASecurityGroup
              - Description: NetworkInterfaces Configuration For EFA and EKS
                NetworkCardIndex: 3
                DeviceIndex: 3
                InterfaceType: efa
                Groups:
                - !Ref EFASecurityGroup
            -
              - Description: NetworkInterfaces Configuration For EFA and EKS
                NetworkCardIndex: 0
                DeviceIndex: 0
                InterfaceType: efa
                Groups:
                  - !Ref EFASecurityGroup
        UserData:
          Fn::Base64:
            Fn::If:
            - IsUserDataMIMEPart
            - Fn::Sub: |
                Content-Type: multipart/mixed; boundary="BOUNDARY"
                MIME-Version: 1.0

                --BOUNDARY
                ${UserData}

                --BOUNDARY
                Content-Type: text/x-shellscript; charset="us-ascii"
                MIME-Version: 1.0

                #!/usr/bin/env bash
                /opt/aws/bin/cfn-signal \
                  --stack  ${AWS::StackName} \
                  --resource NodeGroup \
                  --region ${AWS::Region}

                --BOUNDARY--
            - Fn::Sub: |
                ${UserData}

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref ResourceId
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NodeLaunchTemplate
            Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      DesiredCapacity: !Ref NodeCount
      MinSize: !Ref NodeCount
      MaxSize: !Ref NodeCount
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-Node
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
          PropagateAtLaunch: true
